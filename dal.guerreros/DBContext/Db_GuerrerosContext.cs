// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using dal.guerreros;
using biz.guerreros.Entities;

namespace dal.guerreros.DBContext
{
    public partial class Db_GuerrerosContext : DbContext
    {
        public Db_GuerrerosContext()
        {
        }

        public Db_GuerrerosContext(DbContextOptions<Db_GuerrerosContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ClinicalStudy> ClinicalStudy { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Leaflet> Leaflet { get; set; }
        public virtual DbSet<Postulation> Postulation { get; set; }
        public virtual DbSet<ResearchSites> ResearchSites { get; set; }
        public virtual DbSet<Specialty> Specialty { get; set; }
        public virtual DbSet<Sponsor> Sponsor { get; set; }
        public virtual DbSet<StudyCategory> StudyCategory { get; set; }
        public virtual DbSet<StudyType> StudyType { get; set; }
        public virtual DbSet<Suffering> Suffering { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }

        public virtual DbSet<StudiesClinicians> StudiesClinicians { get; set; }

        public virtual DbSet<Status> Status { get; set; }

        public virtual DbSet<News> News { get; set; }

        public virtual DbSet<InclusionCriteria> InclusionCriteria { get;set;}
        
        public virtual DbSet<Contacts> Contacts { get; set; }

        public virtual DbSet<InformationGuerreros> InformationGuerreros { get; set; }

        public virtual DbSet<ContactGuerreros> ContactGuerreros { get; set; }

        public virtual DbSet<Notifications> Notifications { get; set; }

        public virtual DbSet<SupportPrograms> SupportPrograms { get; set; }

        public virtual DbSet<SupportProgramsDetail> SupportProgramsDetail { get; set; }

        public virtual DbSet<SponsorsGuerreros> SponsorsGuerreros { get; set; }

        public virtual DbSet<SponsorsGuerrerosDetail> SponsorsGuerrerosDetail { get; set; }

        public virtual DbSet<ShareClinicalStudies> ShareClinicalStudies { get; set; }

        
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<ClinicalStudy>(entity =>
            {
                entity.Property(e => e.AgeRange).HasMaxLength(30);

                entity.Property(e => e.Description)
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.MainIntervention)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProtocolNumber).HasMaxLength(20);

                entity.Property(e => e.PublicationDate).HasColumnType("datetime");

                entity.HasOne(d => d.StudiesClinicians)
                    .WithMany(p => p.ClinicalStudy)
                    .HasForeignKey(d => d.StudiesCliniciansId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClinicalStudy_StudiesClinicians");

                entity.HasOne(d => d.StudyType)
                    .WithMany(p => p.ClinicalStudy)
                    .HasForeignKey(d => d.StudyTypeId)
                    .HasConstraintName("FK_ClinicalStudy_StudyType");
            });

            modelBuilder.Entity<ContactGuerreros>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(210)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(140)
                    .IsUnicode(false);

                entity.Property(e => e.Facebook)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Instagram)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Twitter)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("twitter");
            });

            modelBuilder.Entity<Contacts>(entity =>
            {
                entity.Property(e => e.ContactType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InclusionCriteria>(entity =>
            {
                entity.Property(e => e.CriteriaLong)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CriteriaSmall)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.HasOne(d => d.StudiesClinicians)
                    .WithMany(p => p.InclusionCriteria)
                    .HasForeignKey(d => d.StudiesCliniciansId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InclusionCriteria_StudiesClinicians");
            });

            modelBuilder.Entity<InformationGuerreros>(entity =>
            {
                entity.Property(e => e.About)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("about");

                entity.Property(e => e.NoticePrivacy)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Leaflet>(entity =>
            {
                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MailReason)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.Property(e => e.ContentNews)
                    .IsRequired()
                    .HasMaxLength(900)
                    .IsUnicode(false);

                entity.Property(e => e.DateNews).HasColumnType("datetime");

                entity.Property(e => e.PathImage)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.StudyCategory)
                    .WithMany(p => p.News)
                    .HasForeignKey(d => d.StudyCategoryId)
                    .HasConstraintName("FK_News_StudyCategory");
            });

            modelBuilder.Entity<Notifications>(entity =>
            {
                entity.Property(e => e.AgeRange)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Postulation>(entity =>
            {
                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PatientCode)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.RelevantDate)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Suffering)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.StudiesClinicians)
                    .WithMany(p => p.Postulation)
                    .HasForeignKey(d => d.StudiesCliniciansId)
                    .HasConstraintName("FK_Postulation_StudiesClinicians");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Postulation)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Postulation_Users");
            });

            modelBuilder.Entity<ResearchSites>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(70);
            });

            modelBuilder.Entity<ShareClinicalStudies>(entity =>
            {
                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creationDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.StudiesClinicians)
                    .WithMany(p => p.ShareClinicalStudies)
                    .HasForeignKey(d => d.StudiesCliniciansId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShareClinicalStudies_StudiesClinicians");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ShareClinicalStudies)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ShareClinicalStudies_Users");
            });

            modelBuilder.Entity<Specialty>(entity =>
            {
                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sponsor>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<SponsorType>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(30);
            });

            modelBuilder.Entity<SponsorsGuerreros>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SponsorsGuerrerosDetail>(entity =>
            {
                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImageSponsor)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.SponsorType)
                    .WithMany(p => p.SponsorsGuerrerosDetail)
                    .HasForeignKey(d => d.SponsorTypeId)
                    .HasConstraintName("FK_SponsorsGuerrerosDetail_SponsorType");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<StudiesClinicians>(entity =>
            {
                entity.Property(e => e.Approved).HasColumnName("approved");

                entity.Property(e => e.PublicationDate).HasColumnType("datetime");

                entity.Property(e => e.StudyContent)
                    .IsRequired()
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Satatus)
                    .WithMany(p => p.StudiesClinicians)
                    .HasForeignKey(d => d.SatatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StudiesClinicians_Status");

                entity.HasOne(d => d.StudyCategory)
                    .WithMany(p => p.StudiesClinicians)
                    .HasForeignKey(d => d.StudyCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StudiesClinicians_StudyCategory");
            });

            modelBuilder.Entity<StudyCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PathImage)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PathImageAvatar)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StudyType>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Suffering>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SupportPrograms>(entity =>
            {
                entity.Property(e => e.ProgramContent)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProgramTitle)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PublicationDate).HasColumnType("datetime");

                entity.Property(e => e.Summary)
                    .HasMaxLength(842)
                    .IsUnicode(false)
                    .HasColumnName("summary");

                entity.HasOne(d => d.StudyCategory)
                    .WithMany(p => p.SupportPrograms)
                    .HasForeignKey(d => d.StudyCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupportPrograms_SupportPrograms");
            });

            modelBuilder.Entity<SupportProgramsDetail>(entity =>
            {
                entity.Property(e => e.AgeRange).HasMaxLength(30);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.MainIntervention)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("mainIntervention");

                entity.Property(e => e.PublicationDate).HasColumnType("datetime");

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.HasOne(d => d.SupportPrograms)
                    .WithMany(p => p.SupportProgramsDetail)
                    .HasForeignKey(d => d.SupportProgramsId)
                    .HasConstraintName("FK_SupportProgramsDetail_SupportPrograms");
            });

            modelBuilder.Entity<UserType>(entity =>
            {
                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Avatar)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProfessionalLicense)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_date");

                entity.Property(e => e.VerificationCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Specialty)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.SpecialtyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_Especialidades");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}